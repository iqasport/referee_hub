// <auto-generated />
using System;
using System.Net;
using ManagementHub.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ManagementHub.Storage.Migrations
{
    [DbContext(typeof(ManagementHubDbContext))]
    [Migration("20230513191555_Add_UniqueId_to_TestAttempt")]
    partial class Add_UniqueId_to_TestAttempt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ManagementHub.Models.Data.ActiveStorageAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BlobId")
                        .HasColumnType("bigint")
                        .HasColumnName("blob_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<long>("RecordId")
                        .HasColumnType("bigint")
                        .HasColumnName("record_id");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("record_type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BlobId" }, "index_active_storage_attachments_on_blob_id");

                    b.HasIndex(new[] { "RecordType", "RecordId", "Name", "BlobId" }, "index_active_storage_attachments_uniqueness")
                        .IsUnique();

                    b.ToTable("active_storage_attachments", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.ActiveStorageBlob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ByteSize")
                        .HasColumnType("bigint")
                        .HasColumnName("byte_size");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("checksum");

                    b.Property<string>("ContentType")
                        .HasColumnType("character varying")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("filename");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("key");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Key" }, "index_active_storage_blobs_on_key")
                        .IsUnique();

                    b.ToTable("active_storage_blobs", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Correct")
                        .HasColumnType("boolean")
                        .HasColumnName("correct");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.ArInternalMetadatum", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("character varying")
                        .HasColumnName("key");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("ar_internal_metadata_pkey");

                    b.ToTable("ar_internal_metadata", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Certification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("display_name")
                        .HasDefaultValueSql("''");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("version")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Level", "Version" }, "index_certifications_on_level_and_version")
                        .IsUnique();

                    b.ToTable("certifications", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.CertificationPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CertificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("certification_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("StripeSessionId")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("stripe_session_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.HasIndex("UserId");

                    b.ToTable("certification_payments", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.DataMigration", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("character varying")
                        .HasColumnName("version");

                    b.HasKey("Version")
                        .HasName("data_migrations_pkey");

                    b.ToTable("data_migrations", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.ExportedCsv", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExportOptions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("json")
                        .HasColumnName("export_options")
                        .HasDefaultValueSql("'{}'");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("processed_at");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Type")
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("character varying")
                        .HasColumnName("url");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "index_exported_csvs_on_user_id");

                    b.ToTable("exported_csvs", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.FlipperFeature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("key");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Key" }, "index_flipper_features_on_key")
                        .IsUnique();

                    b.ToTable("flipper_features", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.FlipperGate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FeatureKey")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("feature_key");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("key");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("character varying")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FeatureKey", "Key", "Value" }, "index_flipper_gates_on_feature_key_and_key_and_value")
                        .IsUnique();

                    b.ToTable("flipper_gates", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("long_name")
                        .HasDefaultValueSql("'english'");

                    b.Property<string>("LongRegion")
                        .HasColumnType("character varying")
                        .HasColumnName("long_region");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("short_name")
                        .HasDefaultValueSql("'en'");

                    b.Property<string>("ShortRegion")
                        .HasColumnType("character varying")
                        .HasColumnName("short_region");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.NationalGoverningBody", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Acronym")
                        .HasColumnType("character varying")
                        .HasColumnName("acronym");

                    b.Property<string>("Country")
                        .HasColumnType("character varying")
                        .HasColumnName("country");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasColumnName("countryCode");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("image_url");

                    b.Property<int>("MembershipStatus")
                        .HasColumnType("integer")
                        .HasColumnName("membership_status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int>("PlayerCount")
                        .HasColumnType("integer")
                        .HasColumnName("player_count");

                    b.Property<int?>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Website")
                        .HasColumnType("character varying")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryCode" }, "index_national_governing_bodies_on_country_code")
                        .IsUnique();

                    b.HasIndex(new[] { "Region" }, "index_national_governing_bodies_on_region");

                    b.ToTable("national_governing_bodies", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.NationalGoverningBodyAdmin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("NationalGoverningBodyId")
                        .HasColumnType("bigint")
                        .HasColumnName("national_governing_body_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NationalGoverningBodyId" }, "index_national_governing_body_admins_on_ngb_id");

                    b.HasIndex(new[] { "UserId" }, "index_national_governing_body_admins_on_user_id")
                        .IsUnique();

                    b.ToTable("national_governing_body_admins", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.NationalGoverningBodyStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AssistantRefereesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("assistant_referees_count")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("CommunityTeamsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("community_teams_count")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("CompetitiveTeamsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("competitive_teams_count")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("DevelopingTeamsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("developing_teams_count")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<int?>("HeadRefereesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("head_referees_count")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("InactiveTeamsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inactive_teams_count")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("NationalGoverningBodyId")
                        .HasColumnType("bigint")
                        .HasColumnName("national_governing_body_id");

                    b.Property<int?>("ScorekeeperRefereesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("scorekeeper_referees_count")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("SnitchRefereesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("snitch_referees_count")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start");

                    b.Property<int?>("TeamStatusChangeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("team_status_change_count")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("TotalRefereesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("total_referees_count")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("TotalTeamsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("total_teams_count")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("UncertifiedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("uncertified_count")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("UniversityTeamsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("university_teams_count")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("YouthTeamsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("youth_teams_count")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NationalGoverningBodyId" }, "ngb_stats_on_ngb_id");

                    b.ToTable("national_governing_body_stats", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.PolicyManagerPortabilityRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expire_at");

                    b.Property<string>("State")
                        .HasColumnType("character varying")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "index_policy_manager_portability_requests_on_user_id");

                    b.ToTable("policy_manager_portability_requests", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.PolicyManagerTerm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("accepted_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("rejected_at");

                    b.Property<string>("Rule")
                        .HasColumnType("character varying")
                        .HasColumnName("rule");

                    b.Property<string>("State")
                        .HasColumnType("character varying")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("policy_manager_terms", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.PolicyManagerUserTerm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("State")
                        .HasColumnType("character varying")
                        .HasColumnName("state");

                    b.Property<long?>("TermId")
                        .HasColumnType("bigint")
                        .HasColumnName("term_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "State" }, "index_policy_manager_user_terms_on_state");

                    b.HasIndex(new[] { "TermId" }, "index_policy_manager_user_terms_on_term_id");

                    b.HasIndex(new[] { "UserId" }, "index_policy_manager_user_terms_on_user_id");

                    b.ToTable("policy_manager_user_terms", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<int>("PointsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("points_available")
                        .HasDefaultValueSql("1");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint")
                        .HasColumnName("test_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.RefereeAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AnswerId")
                        .HasColumnType("bigint")
                        .HasColumnName("answer_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.Property<long>("RefereeId")
                        .HasColumnType("bigint")
                        .HasColumnName("referee_id");

                    b.Property<long>("TestAttemptId")
                        .HasColumnType("bigint")
                        .HasColumnName("test_attempt_id");

                    b.Property<long>("TestId")
                        .HasColumnType("bigint")
                        .HasColumnName("test_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AnswerId" }, "index_referee_answers_on_answer_id");

                    b.HasIndex(new[] { "QuestionId" }, "index_referee_answers_on_question_id");

                    b.HasIndex(new[] { "RefereeId" }, "index_referee_answers_on_referee_id");

                    b.HasIndex(new[] { "TestAttemptId" }, "index_referee_answers_on_test_attempt_id");

                    b.HasIndex(new[] { "TestId" }, "index_referee_answers_on_test_id");

                    b.ToTable("referee_answers", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.RefereeCertification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CertificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("certification_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("NeedsRenewalAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("needs_renewal_at");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("received_at");

                    b.Property<long>("RefereeId")
                        .HasColumnType("bigint")
                        .HasColumnName("referee_id");

                    b.Property<DateTime?>("RenewedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("renewed_at");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("revoked_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.HasIndex(new[] { "RefereeId", "CertificationId" }, "index_referee_certs_on_ref_id_and_cert_id")
                        .IsUnique()
                        .HasFilter("(revoked_at IS NULL)");

                    b.ToTable("referee_certifications", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.RefereeLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AssociationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("association_type")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("NationalGoverningBodyId")
                        .HasColumnType("bigint")
                        .HasColumnName("national_governing_body_id");

                    b.Property<long>("RefereeId")
                        .HasColumnType("bigint")
                        .HasColumnName("referee_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("NationalGoverningBodyId");

                    b.HasIndex(new[] { "RefereeId", "NationalGoverningBodyId" }, "index_referee_locations_on_referee_id_and_ngb_id")
                        .IsUnique();

                    b.ToTable("referee_locations", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.RefereeTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AssociationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("association_type")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("RefereeId")
                        .HasColumnType("bigint")
                        .HasColumnName("referee_id");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RefereeId" }, "index_referee_teams_on_referee_id");

                    b.HasIndex(new[] { "RefereeId", "AssociationType" }, "index_referee_teams_on_referee_id_and_association_type")
                        .IsUnique();

                    b.HasIndex(new[] { "TeamId" }, "index_referee_teams_on_team_id");

                    b.ToTable("referee_teams", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessType")
                        .HasColumnType("integer")
                        .HasColumnName("access_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "index_roles_on_user_id");

                    b.HasIndex(new[] { "UserId", "AccessType" }, "index_roles_on_user_id_and_access_type")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.SchemaMigration", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("character varying")
                        .HasColumnName("version");

                    b.HasKey("Version")
                        .HasName("schema_migrations_pkey");

                    b.ToTable("schema_migrations", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.SocialAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountType")
                        .HasColumnType("integer")
                        .HasColumnName("account_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("OwnableId")
                        .HasColumnType("bigint")
                        .HasColumnName("ownable_id");

                    b.Property<string>("OwnableType")
                        .HasColumnType("character varying")
                        .HasColumnName("ownable_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OwnableType", "OwnableId" }, "index_social_accounts_on_ownable_type_and_ownable_id");

                    b.ToTable("social_accounts", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("GroupAffiliation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("group_affiliation")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<long?>("NationalGoverningBodyId")
                        .HasColumnType("bigint")
                        .HasColumnName("national_governing_body_id");

                    b.Property<string>("State")
                        .HasColumnType("character varying")
                        .HasColumnName("state");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NationalGoverningBodyId" }, "index_teams_on_national_governing_body_id");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.TeamStatusChangeset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NewStatus")
                        .HasColumnType("character varying")
                        .HasColumnName("new_status");

                    b.Property<string>("PreviousStatus")
                        .HasColumnType("character varying")
                        .HasColumnName("previous_status");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TeamId" }, "index_team_status_changesets_on_team_id");

                    b.ToTable("team_status_changesets", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("CertificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("certification_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Language")
                        .HasColumnType("character varying")
                        .HasColumnName("language");

                    b.Property<int?>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("level")
                        .HasDefaultValueSql("0");

                    b.Property<int>("MinimumPassPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("minimum_pass_percentage")
                        .HasDefaultValueSql("80");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("NegativeFeedback")
                        .HasColumnType("text")
                        .HasColumnName("negative_feedback");

                    b.Property<long?>("NewLanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("new_language_id");

                    b.Property<string>("PositiveFeedback")
                        .HasColumnType("text")
                        .HasColumnName("positive_feedback");

                    b.Property<bool?>("Recertification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("recertification")
                        .HasDefaultValueSql("false");

                    b.Property<int>("TestableQuestionCount")
                        .HasColumnType("integer")
                        .HasColumnName("testable_question_count");

                    b.Property<int>("TimeLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("time_limit")
                        .HasDefaultValueSql("18");

                    b.Property<string>("UniqueId")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("unique_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.HasIndex("NewLanguageId");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.TestAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("NextAttemptAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("next_attempt_at");

                    b.Property<long?>("RefereeId")
                        .HasColumnType("bigint")
                        .HasColumnName("referee_id");

                    b.Property<long?>("TestId")
                        .HasColumnType("bigint")
                        .HasColumnName("test_id");

                    b.Property<int?>("TestLevel")
                        .HasColumnType("integer")
                        .HasColumnName("test_level");

                    b.Property<string>("UniqueId")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("unique_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RefereeId");

                    b.HasIndex("TestId");

                    b.ToTable("test_attempts", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.TestResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("certificate_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Duration")
                        .HasColumnType("character varying")
                        .HasColumnName("duration");

                    b.Property<int?>("MinimumPassPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_pass_percentage");

                    b.Property<bool?>("Passed")
                        .HasColumnType("boolean")
                        .HasColumnName("passed");

                    b.Property<int?>("Percentage")
                        .HasColumnType("integer")
                        .HasColumnName("percentage");

                    b.Property<int?>("PointsAvailable")
                        .HasColumnType("integer")
                        .HasColumnName("points_available");

                    b.Property<int?>("PointsScored")
                        .HasColumnType("integer")
                        .HasColumnName("points_scored");

                    b.Property<long>("RefereeId")
                        .HasColumnType("bigint")
                        .HasColumnName("referee_id");

                    b.Property<long?>("TestId")
                        .HasColumnType("bigint")
                        .HasColumnName("test_id");

                    b.Property<int?>("TestLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("test_level")
                        .HasDefaultValueSql("0");

                    b.Property<TimeOnly?>("TimeFinished")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_finished");

                    b.Property<TimeOnly?>("TimeStarted")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time_started");

                    b.Property<string>("UniqueId")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("unique_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex(new[] { "RefereeId" }, "index_test_results_on_referee_id");

                    b.ToTable("test_results", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Admin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("admin")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime?>("ConfirmationSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confirmation_sent_at");

                    b.Property<string>("ConfirmationToken")
                        .HasColumnType("character varying")
                        .HasColumnName("confirmation_token");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("CurrentSignInAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("current_sign_in_at");

                    b.Property<IPAddress>("CurrentSignInIp")
                        .HasColumnType("inet")
                        .HasColumnName("current_sign_in_ip");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("email")
                        .HasDefaultValueSql("''");

                    b.Property<string>("EncryptedPassword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("encrypted_password")
                        .HasDefaultValueSql("''");

                    b.Property<bool?>("ExportName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("export_name")
                        .HasDefaultValueSql("true");

                    b.Property<int>("FailedAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_attempts");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("InvitationAcceptedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("invitation_accepted_at");

                    b.Property<DateTime?>("InvitationCreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("invitation_created_at");

                    b.Property<int?>("InvitationLimit")
                        .HasColumnType("integer")
                        .HasColumnName("invitation_limit");

                    b.Property<DateTime?>("InvitationSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("invitation_sent_at");

                    b.Property<string>("InvitationToken")
                        .HasColumnType("character varying")
                        .HasColumnName("invitation_token");

                    b.Property<int?>("InvitationsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("invitations_count")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("InvitedById")
                        .HasColumnType("bigint")
                        .HasColumnName("invited_by_id");

                    b.Property<string>("InvitedByType")
                        .HasColumnType("character varying")
                        .HasColumnName("invited_by_type");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("language_id");

                    b.Property<string>("LastName")
                        .HasColumnType("character varying")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastSignInAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_sign_in_at");

                    b.Property<IPAddress>("LastSignInIp")
                        .HasColumnType("inet")
                        .HasColumnName("last_sign_in_ip");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("locked_at");

                    b.Property<string>("Pronouns")
                        .HasColumnType("character varying")
                        .HasColumnName("pronouns");

                    b.Property<DateTime?>("RememberCreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("remember_created_at");

                    b.Property<DateTime?>("ResetPasswordSentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reset_password_sent_at");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("character varying")
                        .HasColumnName("reset_password_token");

                    b.Property<bool?>("ShowPronouns")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("show_pronouns")
                        .HasDefaultValueSql("false");

                    b.Property<int>("SignInCount")
                        .HasColumnType("integer")
                        .HasColumnName("sign_in_count");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("character varying")
                        .HasColumnName("stripe_customer_id");

                    b.Property<DateTime?>("SubmittedPaymentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("submitted_payment_at");

                    b.Property<string>("UniqueId")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("unique_id");

                    b.Property<string>("UnlockToken")
                        .HasColumnType("character varying")
                        .HasColumnName("unlock_token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex(new[] { "ConfirmationToken" }, "index_users_on_confirmation_token")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "index_users_on_email")
                        .IsUnique();

                    b.HasIndex(new[] { "InvitationToken" }, "index_users_on_invitation_token")
                        .IsUnique();

                    b.HasIndex(new[] { "InvitationsCount" }, "index_users_on_invitations_count");

                    b.HasIndex(new[] { "InvitedById" }, "index_users_on_invited_by_id");

                    b.HasIndex(new[] { "InvitedByType", "InvitedById" }, "index_users_on_invited_by_type_and_invited_by_id");

                    b.HasIndex(new[] { "ResetPasswordToken" }, "index_users_on_reset_password_token")
                        .IsUnique();

                    b.HasIndex(new[] { "UnlockToken" }, "index_users_on_unlock_token")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ManagementHub.Models.Data.ActiveStorageAttachment", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.ActiveStorageBlob", "Blob")
                        .WithMany("ActiveStorageAttachments")
                        .HasForeignKey("BlobId")
                        .IsRequired()
                        .HasConstraintName("fk_rails_c3b3935057");

                    b.Navigation("Blob");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Answer", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("answers__question_fkey");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.CertificationPayment", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.Certification", "Certification")
                        .WithMany("CertificationPayments")
                        .HasForeignKey("CertificationId")
                        .IsRequired()
                        .HasConstraintName("certification_payments__certification_fkey");

                    b.HasOne("ManagementHub.Models.Data.User", "User")
                        .WithMany("CertificationPayments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("certification_payments__user_fkey");

                    b.Navigation("Certification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.NationalGoverningBodyAdmin", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.NationalGoverningBody", "NationalGoverningBody")
                        .WithMany("NationalGoverningBodyAdmins")
                        .HasForeignKey("NationalGoverningBodyId")
                        .IsRequired()
                        .HasConstraintName("fk_rails_e74edd8114");

                    b.HasOne("ManagementHub.Models.Data.User", "User")
                        .WithOne("NationalGoverningBodyAdmin")
                        .HasForeignKey("ManagementHub.Models.Data.NationalGoverningBodyAdmin", "UserId")
                        .IsRequired()
                        .HasConstraintName("fk_rails_c6796ff8f7");

                    b.Navigation("NationalGoverningBody");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.NationalGoverningBodyStat", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.NationalGoverningBody", "NationalGoverningBody")
                        .WithMany("NationalGoverningBodyStats")
                        .HasForeignKey("NationalGoverningBodyId")
                        .HasConstraintName("national_governing_body_stats__national_governing_body_fkey");

                    b.Navigation("NationalGoverningBody");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.PolicyManagerPortabilityRequest", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.User", "User")
                        .WithMany("PolicyManagerPortabilityRequests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("policy_manager_portability_requests__user_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.PolicyManagerUserTerm", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.PolicyManagerTerm", "Term")
                        .WithMany("PolicyManagerUserTerms")
                        .HasForeignKey("TermId")
                        .HasConstraintName("policy_manager_user_terms__term_fkey");

                    b.HasOne("ManagementHub.Models.Data.User", "User")
                        .WithMany("PolicyManagerUserTerms")
                        .HasForeignKey("UserId")
                        .HasConstraintName("policy_manager_user_terms__user_fkey");

                    b.Navigation("Term");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Question", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("questions__test_fkey");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.RefereeAnswer", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.Answer", "Answer")
                        .WithMany("RefereeAnswers")
                        .HasForeignKey("AnswerId")
                        .IsRequired()
                        .HasConstraintName("referee_answers__answer_fkey");

                    b.HasOne("ManagementHub.Models.Data.Question", "Question")
                        .WithMany("RefereeAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("referee_answers__question_fkey");

                    b.HasOne("ManagementHub.Models.Data.User", "Referee")
                        .WithMany("RefereeAnswers")
                        .HasForeignKey("RefereeId")
                        .IsRequired()
                        .HasConstraintName("referee_answers__user_fkey");

                    b.HasOne("ManagementHub.Models.Data.TestAttempt", "TestAttempt")
                        .WithMany("RefereeAnswers")
                        .HasForeignKey("TestAttemptId")
                        .IsRequired()
                        .HasConstraintName("referee_answers__test_attempt_fkey");

                    b.HasOne("ManagementHub.Models.Data.Test", "Test")
                        .WithMany("RefereeAnswers")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("referee_answers__test_fkey");

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("Referee");

                    b.Navigation("Test");

                    b.Navigation("TestAttempt");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.RefereeCertification", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.Certification", "Certification")
                        .WithMany("RefereeCertifications")
                        .HasForeignKey("CertificationId")
                        .IsRequired()
                        .HasConstraintName("referee_certifications__certification_fkey");

                    b.HasOne("ManagementHub.Models.Data.User", "Referee")
                        .WithMany("RefereeCertifications")
                        .HasForeignKey("RefereeId")
                        .IsRequired()
                        .HasConstraintName("referee_certifications__user_fkey");

                    b.Navigation("Certification");

                    b.Navigation("Referee");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.RefereeLocation", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.NationalGoverningBody", "NationalGoverningBody")
                        .WithMany("RefereeLocations")
                        .HasForeignKey("NationalGoverningBodyId")
                        .IsRequired()
                        .HasConstraintName("referee_locations__national_governing_body_fkey");

                    b.HasOne("ManagementHub.Models.Data.User", "Referee")
                        .WithMany("RefereeLocations")
                        .HasForeignKey("RefereeId")
                        .IsRequired()
                        .HasConstraintName("referee_locations__user_fkey");

                    b.Navigation("NationalGoverningBody");

                    b.Navigation("Referee");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.RefereeTeam", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.User", "Referee")
                        .WithMany("RefereeTeams")
                        .HasForeignKey("RefereeId")
                        .HasConstraintName("referee_teams__user_fkey");

                    b.HasOne("ManagementHub.Models.Data.Team", "Team")
                        .WithMany("RefereeTeams")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("referee_teams__team_fkey");

                    b.Navigation("Referee");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Role", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_rails_ab35d699f0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Team", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.NationalGoverningBody", "NationalGoverningBody")
                        .WithMany("Teams")
                        .HasForeignKey("NationalGoverningBodyId")
                        .HasConstraintName("fk_rails_d1c3a2117a");

                    b.Navigation("NationalGoverningBody");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.TeamStatusChangeset", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.Team", "Team")
                        .WithMany("TeamStatusChangesets")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("team_status_changesets__team_fkey");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Test", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.Certification", "Certification")
                        .WithMany("Tests")
                        .HasForeignKey("CertificationId")
                        .HasConstraintName("tests__certification_fkey");

                    b.HasOne("ManagementHub.Models.Data.Language", "NewLanguage")
                        .WithMany("Tests")
                        .HasForeignKey("NewLanguageId")
                        .HasConstraintName("tests__language_fkey");

                    b.Navigation("Certification");

                    b.Navigation("NewLanguage");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.TestAttempt", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.User", "Referee")
                        .WithMany("TestAttempts")
                        .HasForeignKey("RefereeId")
                        .HasConstraintName("test_attempts__user_fkey");

                    b.HasOne("ManagementHub.Models.Data.Test", "Test")
                        .WithMany("TestAttempts")
                        .HasForeignKey("TestId")
                        .HasConstraintName("test_attempts__test_fkey");

                    b.Navigation("Referee");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.TestResult", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.User", "Referee")
                        .WithMany("TestResults")
                        .HasForeignKey("RefereeId")
                        .IsRequired()
                        .HasConstraintName("test_results__user_fkey");

                    b.HasOne("ManagementHub.Models.Data.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId")
                        .HasConstraintName("test_results__test_fkey");

                    b.Navigation("Referee");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.User", b =>
                {
                    b.HasOne("ManagementHub.Models.Data.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("users__language_fkey");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.ActiveStorageBlob", b =>
                {
                    b.Navigation("ActiveStorageAttachments");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Answer", b =>
                {
                    b.Navigation("RefereeAnswers");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Certification", b =>
                {
                    b.Navigation("CertificationPayments");

                    b.Navigation("RefereeCertifications");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Language", b =>
                {
                    b.Navigation("Tests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.NationalGoverningBody", b =>
                {
                    b.Navigation("NationalGoverningBodyAdmins");

                    b.Navigation("NationalGoverningBodyStats");

                    b.Navigation("RefereeLocations");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.PolicyManagerTerm", b =>
                {
                    b.Navigation("PolicyManagerUserTerms");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("RefereeAnswers");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Team", b =>
                {
                    b.Navigation("RefereeTeams");

                    b.Navigation("TeamStatusChangesets");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("RefereeAnswers");

                    b.Navigation("TestAttempts");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.TestAttempt", b =>
                {
                    b.Navigation("RefereeAnswers");
                });

            modelBuilder.Entity("ManagementHub.Models.Data.User", b =>
                {
                    b.Navigation("CertificationPayments");

                    b.Navigation("NationalGoverningBodyAdmin")
                        .IsRequired();

                    b.Navigation("PolicyManagerPortabilityRequests");

                    b.Navigation("PolicyManagerUserTerms");

                    b.Navigation("RefereeAnswers");

                    b.Navigation("RefereeCertifications");

                    b.Navigation("RefereeLocations");

                    b.Navigation("RefereeTeams");

                    b.Navigation("Roles");

                    b.Navigation("TestAttempts");

                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
